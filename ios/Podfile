# ios/Podfile

platform :ios, '12.0'
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

# CocoaPods analytics sends network stats. Uncomment to opt-out.
# ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

# Prepare symlinks and load Flutterâ€™s pod helper
def flutter_root
  generated_xcode_build_settings_path = File.expand_path(
    File.join('..', 'Flutter', 'Generated.xcconfig'),
    __FILE__
  )
  unless File.exist?(generated_xcode_build_settings_path)
    raise <<~ERROR
      #{generated_xcode_build_settings_path} must exist.
      Make sure you have run "flutter pub get" before "pod install".
    ERROR
  end
  File.expand_path(
    File.join('..', 'flutter', 'bin', 'cache', 'artifacts', 'engine', 'ios'),
    __FILE__
  )
end

# Load the Flutter CocoaPods helper, which defines flutter_install_all_ios_pods
load File.join(File.dirname(__FILE__), 'Flutter', 'podhelper.rb')

target 'Runner' do
  use_frameworks!
  use_modular_headers!

  # Install all Flutter pods (including plugins like path_provider_foundation)
  flutter_install_all_ios_pods(File.dirname(File.realpath(__FILE__)))

  # If you have unit tests target
  target 'RunnerTests' do
    inherit! :search_paths
    # Pods for testing can go here
  end
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    if target.name == 'Runner'
      target.build_configurations.each do |config|
        # Force embedding the Swift standard libraries
        config.build_settings['EMBEDDED_CONTENT_CONTAINS_SWIFT_CODE']     = 'YES'
        config.build_settings['ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES']    = 'YES'
      end
    end
  end
end
